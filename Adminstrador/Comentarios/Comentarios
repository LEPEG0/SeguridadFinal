
encrypt_message

1: Pide al usuario que elija entre capturar un mensaje o seleccionar un archivo
2: Pide al usuario que ingrese el mensaje a cifrar
3: Guarda el mensaje ingresado en un archivo
4: Cifra el contenido del archivo mensaje.txt usando la clave pública especificada
5: Muestra un mensaje indicando que el cifrado fue exitoso
6: Genera el hash SHA-384 del mensaje original y lo guarda en un archivo
7: Muestra un mensaje indicando que el hash SHA-384 fue generado
8: Genera el hash SHA-512 del mensaje cifrado y lo guarda en un archivo
9: Muestra un mensaje indicando que el hash SHA-512 fue generado
10: Genera el hash BLAKE2 del mensaje cifrado y lo guarda en un archivo
11: Muestra un mensaje indicando que el hash BLAKE2 fue generado
12: Muestra un mensaje indicando que hubo un error en el cifrado
13: Pide al usuario que ingrese la ruta del archivo a cifrar
14: Verifica si el archivo especificado existe
15: Muestra un mensaje indicando que el archivo no existe
16: Cifra el contenido del archivo especificado y guarda el resultado en un archivo
17: Muestra un mensaje indicando que el archivo fue cifrado exitosamente
18: Genera el hash SHA-384 del archivo original y lo guarda en un archivo
19: Muestra un mensaje indicando que el hash SHA-384 fue generado
20: Genera el hash SHA-512 del archivo cifrado y lo guarda en un archivo
21: Muestra un mensaje indicando que el hash SHA-512 fue generado
22: Genera el hash BLAKE2 del archivo cifrado y lo guarda en un archivo
23: Muestra un mensaje indicando que el hash BLAKE2 fue generado
24: Muestra un mensaje indicando que hubo un error en el cifrado
25: Muestra un mensaje indicando que la opción no es válida
26: Pide al usuario si desea ocultar el mensaje cifrado en un archivo de esteganografía
27: Pide al usuario que ingrese la ruta del archivo de esteganografía
28: Verifica si el archivo de esteganografía especificado existe
29: Muestra un mensaje indicando que el archivo de esteganografía no existe
30: Oculta el mensaje cifrado en el archivo de esteganografía especificado y guarda el resultado en un archivo
31: Muestra un mensaje indicando que el mensaje fue ocultado exitosamente
32: Muestra un mensaje indicando que hubo un error al ocultar el mensaje


generate_keys and send_keys

1: Genera una clave privada RSA de 2048 bits y la guarda en private_key.pem
2: Extrae la clave pública de la clave privada generada y la guarda en public_key.pem
3: Muestra un mensaje indicando que las claves han sido generadas
4: Pide al usuario que ingrese la IP de la contraparte
5: Pide al usuario que ingrese el puerto SSH de la contraparte
6: Pide al usuario que ingrese el nombre de usuario de la contraparte
7: Envía la clave privada a la contraparte usando SCP
8: Envía la clave pública a la contraparte usando SCP
9: Verifica si el envío de las claves fue exitoso
10: Muestra un mensaje indicando que las claves fueron enviadas correctamente
11: Muestra un mensaje indicando que hubo un error al enviar las claves y finaliza el script con un error


get_mac_address

1: Pide al usuario que ingrese la IP de la contraparte
2: Pide al usuario que ingrese el nombre de usuario de la contraparte
3: Verifica si la IP proporcionada es válida
4: Muestra un mensaje indicando que la IP no es válida y finaliza el script con un error
5: Realiza un ping a la IP de la contraparte
6: Obtiene la dirección MAC de la IP proporcionada usando el comando arp
7: Verifica si se obtuvo una dirección MAC
8: Muestra un mensaje indicando que no se pudo obtener la dirección MAC y finaliza el script con un error
9: Muestra la dirección MAC de la contraparte
10: Verifica si el usuario, la IP y la MAC están en la lista permitida
11: Muestra un mensaje indicando que el usuario, la IP y la dirección MAC son válidos y están permitidos
12: Muestra un mensaje indicando que el usuario, la IP o la dirección MAC no coinciden con la lista permitida y finaliza el script con un error


main

1: Muestra un mensaje indicando que se está iniciando el sistema de comunicaciones seguras
2: Obtener la dirección MAC de la contraparte
3: Generar las llaves RSA y enviarlas a la contraparte
4: Capturar o seleccionar un archivo y cifrarlo
5: Enviar el archivo cifrado a otro equipo
6: Muestra un mensaje indicando que el sistema de comunicaciones seguras ha sido completado


send_encrypted_file

1: Pide al usuario que ingrese la IP del destinatario
2: Pide al usuario que ingrese el puerto SSH del destinatario
3: Pide al usuario que ingrese el nombre del archivo cifrado (mensaje_cifrado.bin o archivo_cifrado.bin)
4: Pide al usuario que ingrese el nombre de usuario del destinatario
5: Verifica si el archivo cifrado existe
6: Verifica si el archivo de hash SHA-384 existe
7: Verifica si el archivo de hash SHA-512 existe
8: Verifica si el archivo de hash BLAKE2 existe
9: Verifica si el archivo de esteganografía existe y lo envía si es necesario
10: Envía el archivo cifrado al destinatario
11: Envía el archivo de hash SHA-384 al destinatario
12: Envía el archivo de hash SHA-512 al destinatario
13: Envía el archivo de hash BLAKE2 al destinatario
14: Verifica si el envío del archivo cifrado y los hashes fue exitoso


USUARIO
validate_blake2
extract_message
validate_sha512
decrypt_message
validate_sha384

1: Validar el HASH Blake2
2: Muestra un mensaje indicando que se está validando el hash BLAKE2
3: Calcula el hash BLAKE2 del archivo cifrado
4: Lee el hash BLAKE2 almacenado del archivo correspondiente
5: Compara el hash calculado con el hash almacenado
6: Muestra un mensaje indicando que el hash BLAKE2 es correcto
7: Muestra un mensaje indicando que la comunicación fue alterada y elimina los archivos relacionados
8: Extraer el mensaje del archivo de esteganografía
9: Extrae el mensaje del archivo de esteganografía usando steghide
10: Verifica si la extracción del mensaje fue exitosa
11: Muestra un mensaje indicando que el mensaje fue extraído correctamente
12: Muestra un mensaje indicando que hubo un error al extraer el mensaje
13: Validar el HASH sha512
14: Muestra un mensaje indicando que se está validando el hash SHA-512
15: Calcula el hash SHA-512 del archivo cifrado
16: Lee el hash SHA-512 almacenado del archivo correspondiente
17: Compara el hash calculado con el hash almacenado
18: Muestra un mensaje indicando que el hash SHA-512 es correcto
19: Muestra un mensaje indicando que hubo un error en la verificación SHA-512 y elimina los archivos relacionados
20: Desencriptar el mensaje usando la clave privada recibida
21: Define la ruta de la clave privada
22: Verifica si la clave privada existe en la ruta especificada
23: Muestra un mensaje indicando que la clave privada no existe
24: Desencripta el mensaje cifrado usando la clave privada
25: Verifica si la desencriptación del mensaje fue exitosa
26: Muestra un mensaje indicando que el mensaje fue desencriptado correctamente y guardado
27: Muestra un mensaje indicando que hubo un error al desencriptar el archivo
28: Validar el HASH sha384
29: Muestra un mensaje indicando que se está validando el hash SHA-384
30: Calcula el hash SHA-384 del mensaje desencriptado
31: Lee el hash SHA-384 almacenado del archivo correspondiente
32: Compara el hash calculado con el hash almacenado
33: Muestra un mensaje indicando que el hash SHA-384 del mensaje es correcto
34: Muestra un mensaje indicando que el sistema fue vulnerado y elimina los archivos relacionados
35: Ejecuta la función para validar el hash BLAKE2
36: Ejecuta la función para extraer el mensaje del archivo de esteganografía
37: Ejecuta la función para validar el hash SHA-512
38: Ejecuta la función para desencriptar el mensaje usando la clave privada
39: Ejecuta la función para validar el hash SHA-384



